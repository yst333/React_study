※ Spring Boot와 React를 연동하여 개발 환경을 만드는 과정

[React 와 SpringBoot를 연동하여 개발환경 세팅]
1. Spring Boot 기본 설정하기
   1) Name : SpringBootReactProxy
   2) Type: Maven
   3) Packaging: War
   4) Java Version: 8
   5) Language: Java
   6) Group: SpringBootProject
   7) Artifact: SpringBootReactProxy
   8) Package: com.springboot.react

   Next - Spring Boot Version: 2.7.2

   Available: Dependency는 Spring Web, Spring Boot DevTools 추가!

  [중요] : SpringBootReactProxy 프로젝트 생성 후 필히!
            application.properties 파일에 다음과 같이 포트 번호 작성 바랍니다.

  [application.properties 파일에 포트 번호 작성 : 예시]
   server.port=9008

============================================================

2. 스프링으로 간단한 Rest API 서버 만들기
  일단 간단한 Rest API 서버를 만들어서 아래의 코드를 추가해 줍니다.

[com.springboot.react 패키지에 demo 패키지를 추가 생성해 줍니다]
[com.springboot.react.demo 패키지에 HelloController.java 소스 코딩]

package com.springboot.react.demo; 
 
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
 
import java.util.Date;
 
@RestController
public class HelloController {
 
    @GetMapping("/api/hello")
    public String hello(){
        return "안녕하세요. 현재 서버 시간은 "+new Date() +"입니다! \n";
    }
}

========================================================================

SpringBootReactProxy 프로젝트 - 우클릭 - Run As
- Spring Boot App (스프링 부트 실행)시키면
아래의 주소 http://localhost:9008/api/hello
(또는 http://192.168.0.99:9008/api/hello) 에는
다음과 같이 출력됩니다.

[스프링 부트 Back-End 실행 확인 : 예시]
안녕하세요. 현재 서버시간은 Mon Mar 02 14:33:57 KST 2020입니다.

======================================================================== 

3. React frontend 앱 프로젝트 생성

React frontend 앱 프로젝트 생성은 create-react-app를 활용해서 설치합니다.
우선, C드라이브에 ReactSpringBootProxy 폴더를 생성하고,
VisualStudioCode에서 "폴더열기"로 ReactSpringBootProxy 폴더를 지정해 줍니다.
그리고, 다음의 명령어를 실행하여 frontend 프로젝트 앱을 생성해 줍니다.

[다음]
C:\ReactSpringBootProxy>npx create-react-app frontend
이런식으로 설치를 완료를 하게된다면  다음과 같은 코드가 나옵니다.

We suggest that you begin by typing:

  cd frontend
  yarn start (또는 npm start)

해당 디렉토리로 이동하여, yarn start 혹은 npm start를 통해서 실행을 하게되면 됩니다.

4. 리액트와 스프링부트의 CORS 문제 해결하기

스프링부트의 백엔드 서버는 localhost:9008에서 실행되고 있고,
React 프론트엔드 서버는 localhost:3000번으로 실행됩니다.
그러다보니 CORS(cross-origin requests) 가 발생하게되는데,
그런 문제를 해결 하기위해서는 Proxy를 프론트쪽에서 잡아주셔야 합니다. 

package.json 파일에 다음의 구문을 추가해 줍니다.

[중요 : 추가해줄 구문]

"proxy": "http://localhost:9008",

====================================================================

[앞서 Proxy 적용이 된 CORS 문제 해결된 package.json 파일]
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },

  "proxy": "http://localhost:9008",

  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

====================================================================

5. 리액트의 Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
   오류 문제 해결

[중요] 리액트 앱 프로젝트에 .env 파일 생성 후 다음의 구문을 추가해 줍니다.

[중요 : .env 파일 생성 후에 추가해줄 구문]
DANGEROUSLY_DISABLE_HOST_CHECK=true

====================================================================

6. 리액트의 App.js를 변경해서 Rest API의 값을 받고 출력해 봅니다.

[App.js 소스 코딩 변경]

import React, {useState, useEffect} from 'react';
import logo from './logo.svg';
import './App.css';
 
function App () {
    const [message, setMessage] = useState("");
 
    useEffect(() => {
        fetch('/api/hello')
            .then(response => response.text())
            .then(message => {
                setMessage(message);
            });
    // useEffect에서 설정한 함수를 컴포넌가 화면에 맨 처음 렌더링될
    // 때만 실행하고, 업데이트될 때는 실행하지 않으려면 함수의 두번째
    // 파라미터로 비어 있는 배열을 넣어주면 됩니다.
    },[]);

    return (
        <div className="App">
            <header className="App-header">
                <img src={logo} className="App-logo" alt="logo"/>
                <h1 className="App-title">{message}</h1>
            </header>
            <p className="App-intro">
                To get started, edit <code>src/App.js</code> and save to reload.
            </p>
        </div>
    );
};
 
export default App;

==========================================================================

7. 리액트 실행 확인

1) C:\ReactSpringBootProxy\frontend>npm start
   또는 C:\ReactSpringBootProxy\frontend>yarn start

2) http://localhost:3000/ 을 이용하면, 앞서 받아온 응답값을 화면에 출력할 수 있습니다.

   [VSCode 리액트 Front-End 실행 확인 : 예시]
   => 리액트 아이콘과 CSS 표현도 나타나며, 다음의 Back-End 구현 문자열도 표현됩니다.

   안녕하세요. 현재 서버시간은 Wed Oct 27 15:45:45 KST 2021입니다.

==========================================================================

[참고 웹 사이트]
https://sundries-in-myidea.tistory.com/71
https://github.com/kantega/react-and-spring
https://github.com/eirslett/frontend-maven-plugin
https://sundries-in-myidea.tistory.com/112
https://sundries-in-myidea.tistory.com/125
https://sundries-in-myidea.tistory.com/134
https://joshua-dev-story.blogspot.com/2020/01/react-spring.html
https://joshua-dev-story.blogspot.com/2020/01/react-spring-2.html
https://joshua-dev-story.blogspot.com/2020/01/react-spring-3.html
https://kim6394.tistory.com/226
https://velog.io/@jung-co/Spring-boot-%EC%99%80-React-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0
https://velog.io/@black-pepper/Invalid-options-object.-Dev-Server-has-been-initialized-using-an-options-object-that-does-not-match-the-API-schema

