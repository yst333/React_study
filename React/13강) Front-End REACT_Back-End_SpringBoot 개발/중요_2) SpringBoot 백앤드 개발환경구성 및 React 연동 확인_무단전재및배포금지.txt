※ Spring Boot와 React를 연동하여 개발 환경을 만드는 과정

1. Oracle11g DB 계정 생성

  1) 계정명 = springboot_admin

  2) 계정 비밀번호 =  springboot_admin

2. Oracle11g DB 테이블 정보

   1) 테이블명 = springboot_crud

   2) 시퀀스명 = idx_seq

   3) 칼럼명(등록번호) = article_id

   4) 칼럼명(제목) = article_title

   5) 칼럼명(글 내용) = article_content

   * 상기 내용 이외의 DB 네이밍이 필요할 경우, 알맞게 네이밍하여 처리 바랍니다.

3. "REACT_JAVA_SpringBootMVC_JPA_Hibernate_OracleDB_CRUD_화면구성조건_안내.pdf"의 내용을

    반영하여 프로그램 제작을 수행하시기 바랍니다.

====================================================================

[Oracle11gDB 계정 생성 및 권한 부여]

1. 윈도우즈키 + r키 = cmd

2. C:\Users\starh>sqlplus system/System1234

SQL*Plus: Release 11.2.0.1.0 Production on 월 1월 10 19:23:38 2022

Copyright (c) 1982, 2010, Oracle.  All rights reserved.


다음에 접속됨:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options

3. SQL>drop user springboot_admin cascade;

4. SQL>create user springboot_admin identified by springboot_admin;

5. SQL>grant resource, connect, dba to springboot_admin;

6. SQL>conn springboot_admin/springboot_admin;

7. SQL>show user

[SpringBoot와 React 연동을 위한 개발환경 세팅]
1. Spring Boot 기본 설정하기
   
   1) Name 필드란에 BackEndSpringBoot 입력
   2) Type: Maven
   3) Packaging: War
   4) Java Version: 8
   5) Language: Java
   6) Group: BackEndSpringBoot
   7) Artifact: BackEndSpringBoot
   8) Package: com.springboot.react

   Next - Spring Boot Version: 2.7.2

   Available: Dependency는 Spring Web, Lombok, Spring Boot DevTools,
                                   Spring Data JPA, Oracle Driver 추가!
  [Spring Boot DevTools를 처음에 추가하지 않고, 프로젝트 생성 후 추가하려면
   프로젝트 클릭 선택 후 마우스 우클릭 - Spring - Add DevTools 클릭해서 추가해 주면됨]

  [중요] : BackEndSpringBoot 프로젝트 생성 후 필히!
            application.properties 파일에 다음과 같이 포트 번호 작성 바랍니다.

   [참고로, BackEndSpringBoot 프로젝트에서는 JPA와 Hibernate를 활용하며,
    spring.jpa.hibernate.ddl-auto 설정합니다.
    즉, 데이터베이스 테이블이 자동 생성 되게 합니다]

  [application.properties 파일에 포트 번호 작성 예시]

server.port = 9008

spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl
spring.datasource.username=springboot_admin
spring.datasource.password=springboot_admin
#hikari DBCP auto-commit true 설정
spring.datasource.hikari.auto-commit=true
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect

#스키마 생성(create)
# spring.jpa.hibernate.ddl-auto는 데이터베이스에 구조를 생성하는 DDL(Data Definition Language) 처리 옵션 지정 명령어
# update = 변경된 부분만 update 반영
# validate = Entity와 Table이 정상적으로 매핑되었는지만 확인
# none = 사용하지 않음
# create-drop = create와 같지만 종료 시점에 테이블 DROP 처리
# create = 기존 테이블 삭제 후 다시 생성
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=false
spring.jpa.show-sql=true
spring.jpa.database=oracle

# 로그 레벨 info 지정
logging.level.org.hibernate=info
# 로그 레벨 debug 지정 : 상세 debug 로그 확인 가능함 
#logging.level.org.hibernate=debug

[중요 : Project Facets 설정]

BackEndSpringBoot 프로젝트 클릭 선택 - 마우스 우클릭 - properties
- Project Facets 클릭 선택 - 우측 Runtimes에서 WAS 체크 선택
- 중앙 Project Facet 하단 JPA 체크 박스 체크 선택 및 Version 2.1 선택
- Apply - Apply and Close

============================================================

2. C:\app\korea\product\11.2.0\dbhome_1\jdbc\lib 폴더 안에 있는

   ojdbc6.jar 파일을 복사합니다.

3. webapp 폴더 안에 WEB-INF 폴더 생성 - lib 폴더 안에

   ojdbc6.jar 파일을 넣어줌.

4. BackEndSpringBoot 프로젝트 선택 - 마우스 우클릭 Java Build Path 클릭

   - Add Library... 클릭 - Web App Libraries 클릭해서 추가해줌.

============================================================