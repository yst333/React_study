※ 자바스크립트 배열의 map() 함수 이해

자바스크립트 배열 객체의 내장 함수인 map함수를 사용하여
반복되는 컴포넌트를 렌더링할 수 있습니다.
map 함수는 파라미터로 전달된 함수를 사용해서
배열 내 각 요소를 원하는 규칙에 따라 변환한 후
그 결과로 새로운 배열을 생성합니다.

[문법]
arr.map(callback, [thisArg])

[map 함수의 파라미터 의미]

* callback : 새로운 배열의 요소를 생성하는 함수로
               파라미터는 다음 세가지가 있습니다.
  1) currentValue : 현재 처리하고 있는 요소
  2) index : 현재 처리하고 있는 요소의 index 값
  3) array : 현재 처리하고 있는 원본 배열

* thisArg(선택 항목) : callback 함수 내부에서 사용할 this 레퍼런스

[예제 : 다음의 예제는 Chrome 개발자 도구(F12) 콘솔창에서 실행 결과 확인 바랍니다]
[참고로, Chrome 개발자 도구 콘솔창에서 Shift + Enter 하면
 명령어가 바로 실행되지 않고 새 줄을 들여 쓸 수 있습니다]

먼저, map 함수를 사용하여 배열 [1, 2, 3, 4, 5]의 각 요소를 제곱해서
새로운 배열을 생성해 보겠습니다.

========================================================
[ES5 형식]
var numbers = [1, 2, 3, 4, 5];

var processed = numbers.map(function(num) {
	return num * num;
});

console.log(processed);

========================================================

앞서 map 함수는 기존 배열로 새로운 배열을 만드는 역할을 합니다. 앞서 코드를
ES6 문법으로 표현하면 다음과 같습니다.

========================================================

[ES6 형식]
const numbers = [1, 2, 3, 4, 5];
const result = numbers.map(num => num * num);
console.log(result);

========================================================

ES6 문법에서는 ES5 문법에서의 var 키워드 대신 const를 사용했고,
function(...){...} 대신 화살표 함수를 사용했습니다.

========================================================

[주요 요점 정리 내용은 map 함수 활용 마지막 실습인
 components 폴더 안에 IterationSample_4_filter.jsx
 실습 후에 보시기 바랍니다]

※ 주요 요점 정리
컴포넌트 배열을 렌더링할 때는 key 값 설정에 항상 주의해야 합니다.
또 key 값은 언제나 유일해야 합니다. key 값이 중복된다면
렌더링 과정에서 오류가 발생합니다.

상태 안에서 배열을 변형할 때는 배열에 직접 접근하여
수정하는 것이 아니라 concat, filter 등의 배열 내장 함수를 사용하여
새로운 배열을 만든 후 이를 새로운 상태로 설정해 주어야 합니다.
이점을 고려해 주시기 바랍니다.


