* 리액트와 CSS 이해

리액트 프로젝트에서는 일반 CSS 방식도 많이 사용하고,
SASS, SCSS 등 다양한 방식을 활용할 수 있습니다.

CSS를 작성할 때 가장 중요한 점은 CSS 클래스(className)을
중복되지 않게 만드는 것입니다. 중복 방지를 위해,
통용되는 네이밍 규칙을 적용하거나, 또 다른 하나는
CSS Selector 방식을 활용합니다.

1. 네이밍(이름) 규칙 적용 (첫번째 네이밍 방법)
프로젝트에 자동 생성된 App.css를 읽어 보면 클래스 이름이 컴포넌트 이름-클래스 형태로 지어져 있습니다.

(예시 : react-create-app으로 앱 프로젝트 생성 후 App.css 파일 안에서 App-header를 보시기 바랍니다)
[App.css 참고]
.App {
  text-align: center;
}

.App-logo {
  animation: App-logo-spin infinite 20s linear;
  height: 40vmin;
  pointer-events: none;
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}
===========================================================================

클래스 이름에 컴포넌트 이름을 포함시킴으로써
다른 컴포넌트에서 실수로 중복되는 클래스를 만들어 사용하는 것을
방지할 수 있습니다. 비슷한 방식으로 BEM 네이밍 이라는 방식도 있습니다.
BEM 네이밍은 CSS 방법론 중 하나로, 이름을 지을 때 일종의 규칙을 준수하여
해당 클래스가 어디에서 어떤 용도로 사용되는지 명확하게 작성하는 방식입니다.
(예시 : .intro_title-primary)

===========================================================================

2. CSS Selector (두번째 네이밍 방법)

CSS Selector 형식으로 네이밍하면 CSS 클래스가 특정 클래스 내부에 있는 경우에만
스타일을 적용할 수 있습니다. 예를 들면, App 안에 들어 있는 .logo에 스타일을
적용하고 싶다면 다음과 같이 작성하면 됩니다.

// .App 안에 .logo 네이밍 예시
.App .logo {
  animation: App-logo-spin infinite 20s linear;
  height: 40vmin;
  pointer-events: none;
}

===========================================================================

3. SASS와 SCSS 이해
SASS(Syntactically Awesome Style Sheets : 문법적으로 매우 멋진 스타일시트)는
CSS 전처리기로 복잡한 작업을 쉽게 할 수 있도록 해주고, 스타일 코드의
재활용성을 높여 줄 뿐만 아니라 코드의 가독성을 높여서 유지 보수를 더욱 쉽게 해 줍니다.

create-react-app 구버전에서는 SASS를 사용하려면 추가 작업이 필요했는데,
v2 버전부터는 별도의 추가 설정 없이 바로 사용할 수 있습니다.

[중요]
SASS에서는 두 가지 확장자 .SCSS와 .SASS를 지원합니다.
SASS가 처음 나왔을 때는 .SASS 확장자만 지원되었으나
나중에 개발자들의 요청에 의해 .SCSS 확장자도 지원하게 되었습니다.

===========================================================================

[중요]
4. CSS vs .SASS 문법 vs .SCSS 문법 코드 비교

1) .CSS 문법 표현 예시
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

===========================================================================

2) .SASS 문법 표현 예시

$font-stack: Helvetica, sans-serif
$primary-color: #333

body
    font: 100% $font-stack;
    color: $primary-color;

===========================================================================

3) .SCSS 문법 표현 예시

$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body{
    font: 100% $font-stack;
    color: $primary-color;
}

===========================================================================

[중요]
* .SASS 문법과 .SCSS 문법의 주요 차이점을 살펴보면,
  .SASS 확장자는 중괄호( { } )와 세미콜론( ; )을 사용하지 않습니다.
 반면에 .SCSS 확장자는 기존 CSS를 작성하는 방식과 비슷한 문법 형식을 적용합니다.
 보통, .SCSS 문법이 더 자주 사용되며, SASS를 활용하고 싶은 경우에는 다음과 같이
 라이브러리를 프로젝트 디렉터리에서 입력 실행하여 추가 설치해 주어야 합니다.
 참고로, node-sass 라이브러리는 SASS 형식을 CSS 형식으로 변환 처리해 줍니다.

===========================================================================

5. CSS, SASS, SCSS 변환 웹 사이트 참고

[CSS] SASS↔CSS 변환 사이트
 
SASS를 이용한 작업을 하다가 CSS로 변환할 필요가 생겨서 변환사이트를 찾게 되었습니다.
 
*SASS에서 → CSS로 변환 참고 웹사이트
https://www.sassmeister.com/

*CSS → SASS 또는 SCSS로 변환 참고 웹사이트
http://css2sass.herokuapp.com/

===========================================================================

[참고 : LESS] https://lesscss.org/
* LESS란?
  LESS는 CSS에 Script의 능력(변수, 함수, 연산, 중첩, Scope 등)을 덧붙여 확장한 언어입니다.
  클라이언트 또는 서버환경(node.js) 모두에서 실행 됩니다.
  LESS는 CSS Preprocessor(전처리기)로서 CSS를 변수나 Nested Rules을 이용하여
  쉽고 빠르고 체계적으로 프로그래밍 할 수 있게 만든 것을 말합니다.
  이때 전처리기란 다른 프로그램의 입력으로 사용되는 출력을 생성하기 위해
  그 입력 데이터를 처리하는 프로그램을 의미합니다.
  CSS 프리프로세서에는 LESS, SASS/SCSS, COMPASS 등이 있으며
  그중에 LESS의 문법을 따라 프로그래밍 한 것을 LESS 라고 합니다.
  LESS는 CSS의 확장버전으로 하위호환성이 뛰어나며
  CSS의 기존 문법을 그대로 사용하기 때문에 익히기 쉽다는 장점이 있습니다.

*CSS ↔ SASS와 LESS로 변환 참고 웹 사이트
 https://csspre.com/convert/

* LESS 참고 웹 사이트
  https://velog.io/@ejchaid/less-%EB%84%88%EB%8A%94-%EB%AD%90%EA%B0%80-%EB%8B%A4%EB%A5%B8%EA%B1%B0%EC%95%BC

===========================================================================